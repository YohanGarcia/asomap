from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.conf import settings
import os
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'Configurar entorno de desarrollo para ASOMAP'

    def add_arguments(self, parser):
        parser.add_argument(
            '--skip-migrations',
            action='store_true',
            help='Saltar la ejecuci√≥n de migraciones',
        )
        parser.add_argument(
            '--skip-fixtures',
            action='store_true',
            help='Saltar la carga de datos iniciales',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='Forzar la ejecuci√≥n sin confirmaciones',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ Configurando entorno de desarrollo ASOMAP...')
        )

        if not options['force']:
            confirm = input('¬øContinuar con la configuraci√≥n? (y/N): ')
            if confirm.lower() != 'y':
                self.stdout.write(self.style.WARNING('Configuraci√≥n cancelada.'))
                return

        try:
            # 1. Verificar configuraci√≥n
            self.stdout.write('üìã Verificando configuraci√≥n...')
            call_command('check', verbosity=0)
            self.stdout.write(self.style.SUCCESS('‚úì Configuraci√≥n v√°lida'))

            # 2. Ejecutar migraciones
            if not options['skip_migrations']:
                self.stdout.write('üóÑÔ∏è Ejecutando migraciones...')
                call_command('makemigrations', verbosity=0)
                call_command('migrate', verbosity=0)
                self.stdout.write(self.style.SUCCESS('‚úì Migraciones completadas'))

            # 3. Crear directorios necesarios
            self.stdout.write('üìÅ Creando directorios...')
            directories = [
                'media',
                'static',
                'logs',
                'backups',
                'media/about/hero',
                'media/about/quienes-somos',
                'media/about/historia',
                'media/about/directores',
                'media/products/accounts',
                'media/products/loans',
                'media/products/cards',
                'media/products/certificates',
                'media/news',
                'media/promotions',
            ]
            
            for directory in directories:
                os.makedirs(directory, exist_ok=True)
                self.stdout.write(f'  ‚úì {directory}')

            # 4. Cargar datos iniciales
            if not options['skip_fixtures']:
                self.stdout.write('üìä Cargando datos iniciales...')
                try:
                    call_command('create_about_data', verbosity=0)
                    call_command('create_products', verbosity=0)
                    call_command('create_sample_news', verbosity=0)
                    self.stdout.write(self.style.SUCCESS('‚úì Datos iniciales cargados'))
                except Exception as e:
                    self.stdout.write(
                        self.style.WARNING(f'‚ö†Ô∏è Error cargando datos: {e}')
                    )

            # 5. Crear superusuario si no existe
            self.stdout.write('üë§ Verificando superusuario...')
            from django.contrib.auth.models import User
            if not User.objects.filter(is_superuser=True).exists():
                self.stdout.write('Creando superusuario...')
                call_command('createsuperuser', interactive=False, verbosity=0)
                self.stdout.write(self.style.SUCCESS('‚úì Superusuario creado'))
            else:
                self.stdout.write(self.style.SUCCESS('‚úì Superusuario ya existe'))

            self.stdout.write(
                self.style.SUCCESS('üéâ Entorno de desarrollo configurado exitosamente!')
            )
            self.stdout.write('ÔøΩÔøΩ Pr√≥ximos pasos:')
            self.stdout.write('  1. Ejecutar: python manage.py runserver')
            self.stdout.write('  2. Acceder a: http://localhost:8000/admin/')
            self.stdout.write('  3. Acceder a: http://localhost:8000/api/v1/')

        except Exception as e:
            logger.error(f'Error en setup_dev_environment: {e}')
            self.stdout.write(
                self.style.ERROR(f'‚ùå Error durante la configuraci√≥n: {e}')
            )
            raise 