"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from decouple import config, Csv

# Configuración de Jazzmin
try:
    from .jazzmin import JAZZMIN_SETTINGS, JAZZMIN_UI_TWEAKS
except ImportError:
    # Si jazzmin no está instalado, usar configuraciones vacías
    JAZZMIN_SETTINGS = {}
    JAZZMIN_UI_TWEAKS = {}



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-change-this-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=Csv())

# Application definition
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# Agregar jazzmin si está disponible
try:
    import jazzmin
    DJANGO_APPS.insert(0, 'jazzmin')  # Insertar al principio para que tenga prioridad
except ImportError:
    pass  # Si jazzmin no está instalado, continuar sin él

LOCAL_APPS = [
    'home',
    'about',
    'news',
    'products',
    'header',
    'layout',
    'core',
    'locations',
    'educacionfinanciera',
    'prousuario',
    'service',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'corsheaders',
    'drf_spectacular',
    'cloudinary_storage',
    'django_filters',
    'django_prose_editor',
]

INSTALLED_APPS = DJANGO_APPS + LOCAL_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Agregar después de SecurityMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middleware.HealthCheckMiddleware',
    'core.middleware.PublicMediaMiddleware',  # Middleware para servir media públicamente
    'core.middleware.RequestTimeoutMiddleware',
    'core.middleware.FileUploadMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'asomap.db',
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'es-es'
TIME_ZONE = 'America/Santo_Domingo'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Media files
MEDIA_URL = '/media/'
# Permitimos definir MEDIA_ROOT por variable de entorno (útil en producción con volumen persistente)
MEDIA_ROOT = Path(config('MEDIA_ROOT', default=str(BASE_DIR / 'media')))

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS Configuration
CORS_ALLOWED_ORIGINS = config(
    'CORS_ALLOWED_ORIGINS',
    default='http://localhost:4321,http://127.0.0.1:4321,http://localhost:8080,http://127.0.0.1:8080',
    cast=Csv()
)

CORS_ALLOW_CREDENTIALS = True





# Configuraciones adicionales de CORS
CORS_EXPOSE_HEADERS = [
    'content-type',
    'x-csrftoken',
]

CORS_PREFLIGHT_MAX_AGE = 86400  # 24 horas

# Configuraciones adicionales para asegurar CORS
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',
    'pragma',
]

# Permitir todos los orígenes para desarrollo local
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = False

# Configuración específica para producción (cuando se despliegue)
if not DEBUG:
    CORS_ALLOW_ALL_ORIGINS = False
    CORS_ALLOW_CREDENTIALS = True

# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 6,
    'DEFAULT_FILTER_BACKENDS': [
        'rest_framework.filters.OrderingFilter',
        'rest_framework.filters.SearchFilter',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour'
    },
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# JWT Configuration
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# Spectacular Settings (Swagger/OpenAPI)
SPECTACULAR_SETTINGS = {
    'TITLE': 'ASOMAP API',
    'DESCRIPTION': 'Documentación de la API para el sistema de gestión de ASOMAP',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

# Logging Configuration
import os
os.makedirs('logs', exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'logs/asomap.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'asomap': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Security Settings (for production)
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    # Detrás de proxy para evitar bucles de redirección y respetar HTTPS
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    # Eximir healthcheck y raíz de la redirección HTTPS
    SECURE_REDIRECT_EXEMPT = [r"^health/?$", r"^"]

# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@asomap.com')



# Configuración del admin personalizado
ADMIN_SITE_HEADER = "ASOMAP Administration"
ADMIN_SITE_TITLE = "ASOMAP Admin Portal"
ADMIN_INDEX_TITLE = "Bienvenido al Panel de Administración ASOMAP"

# Configuraciones de seguridad
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Configuraciones de sesión
SESSION_COOKIE_AGE = 3600  # 1 hora
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = True

# Configuraciones de autenticación
LOGIN_URL = '/admin/login/'
LOGIN_REDIRECT_URL = '/admin/'
LOGOUT_REDIRECT_URL = '/admin/login/'

# Rate limiting
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}

# Configuraciones responsive
RESPONSIVE_BREAKPOINTS = {
    'mobile': 360,
    'tablet': 640,
    'desktop': 1024,
}

# Configuraciones de accesibilidad
ACCESSIBILITY_SETTINGS = {
    'enable_skip_links': True,
    'enable_focus_indicators': True,
    'enable_high_contrast': True,
    'enable_reduced_motion': True,
}

# Configuraciones de performance
PERFORMANCE_SETTINGS = {
    'enable_lazy_loading': True,
    'enable_image_optimization': True,
    'enable_caching': True,
}

# Configuraciones de integración (sin Redis)
INTEGRATION_SETTINGS = {
    'FRONTEND_URL': config('FRONTEND_URL', default='http://localhost:3000'),
    'API_VERSION': 'v1',
    'CACHE_TIMEOUT': 3600,
    'SYNC_ENABLED': True,
    'REAL_TIME_SYNC': True,
    'NOTIFICATIONS_ENABLED': True,
}

# Configuraciones de WebSocket (sin Redis)
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}



# Configuraciones de Webhooks (simplificadas)
WEBHOOK_SETTINGS = {
    'ENABLED': config('WEBHOOK_ENABLED', default=False, cast=bool),
    'SECRET_KEY': config('WEBHOOK_SECRET_KEY', default=''),
    'ENDPOINTS': {
        'content_updated': config('WEBHOOK_CONTENT_UPDATED_URL', default=''),
        'user_activity': config('WEBHOOK_USER_ACTIVITY_URL', default=''),
        'system_alert': config('WEBHOOK_SYSTEM_ALERT_URL', default=''),
    }
}

# Configuraciones de Email
EMAIL_SETTINGS = {
    'ENABLED': config('EMAIL_ENABLED', default=True, cast=bool),
    'TEMPLATES': {
        'content_updated': 'notifications/content_updated_email.html',
        'user_activity': 'notifications/user_activity_email.html',
        'system_alert': 'notifications/system_alert_email.html',
    }
}

# Configuraciones de Logging mejoradas
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'logs/asomap.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'activity': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'logs/activity.log',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'asomap': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'asomap.activity': {
            'handlers': ['activity'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Configuración específica para Docker
if config('USE_DOCKER_DB', default=False, cast=bool):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('DB_NAME', default='asomap'),
            'USER': config('DB_USER', default='asomap_user'),
            'PASSWORD': config('DB_PASS', default='asomap_password'),
            'HOST': config('DB_HOST', default='db'),
            'PORT': config('DB_PORT', default='5432'),
            'OPTIONS': {
                'sslmode': 'disable',  # Sin SSL en Docker local
            },
            'CONN_MAX_AGE': 60,  # Conexión persistente moderada
        }
    }

# Configuración de static files
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

STATIC_ROOT = BASE_DIR / 'staticfiles'

# Configuración de static files storage
if not DEBUG:
    # En producción, usar WhiteNoise para servir archivos estáticos
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'
    # Configuración adicional de WhiteNoise
    WHITENOISE_USE_FINDERS = True
    WHITENOISE_AUTOREFRESH = True
    WHITENOISE_MAX_AGE = 31536000  # 1 año
else:
    # En desarrollo usamos el storage por defecto
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

# Configuración de media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Configuración para servir archivos de media públicamente
MEDIA_SERVE_PUBLICLY = True

# Configuración de límites de archivo
FILE_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB para archivos grandes
DATA_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB para archivos grandes

# Configuración de directorio temporal
import tempfile
import os

# En producción, usar directorio temporal del sistema
if not DEBUG:
    FILE_UPLOAD_TEMP_DIR = tempfile.gettempdir()
    # Configurar handler para archivos grandes en producción
    FILE_UPLOAD_HANDLERS = [
        'django.core.files.uploadhandler.TemporaryFileUploadHandler',
        'django.core.files.uploadhandler.MemoryFileUploadHandler',
    ]
else:
    # En desarrollo, usar directorio local
    FILE_UPLOAD_TEMP_DIR = BASE_DIR / 'temp_uploads'
    # Handler por defecto en desarrollo
    FILE_UPLOAD_HANDLERS = [
        'django.core.files.uploadhandler.MemoryFileUploadHandler',
        'django.core.files.uploadhandler.TemporaryFileUploadHandler',
    ]

# Configuración de almacenamiento local con volúmenes Docker
DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

# Configuración de directorios para archivos
MEDIA_ROOT = config('MEDIA_ROOT', default='/app/media')
STATIC_ROOT = config('STATIC_ROOT', default='/app/staticfiles')

# Asegurar que los directorios existan
import os
os.makedirs(MEDIA_ROOT, exist_ok=True)
os.makedirs(STATIC_ROOT, exist_ok=True)

# Configuración de seguridad para producción
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# Configuración de CORS para producción
if not DEBUG:
    # Permitir definir orígenes desde FRONTEND_URL (lista separada por comas)
    _frontend_urls = config('FRONTEND_URL', default=None)
    if _frontend_urls:
        CORS_ALLOWED_ORIGINS = Csv()(_frontend_urls)
    else:
        CORS_ALLOWED_ORIGINS = [
            'https://asomap-frontend.vercel.app',
            'https://asomap.vercel.app',
            'https://asomap.com',
        ]
else:
    CORS_ALLOWED_ORIGINS = config(
        'CORS_ALLOWED_ORIGINS',
        default='http://localhost:4321,http://127.0.0.1:3000,http://localhost:8080,http://127.0.0.1:8080',
        cast=Csv()
    )

# CSRF Trusted Origins (necesario cuando se usa HTTPS y cookies)
CSRF_TRUSTED_ORIGINS = config(
    'CSRF_TRUSTED_ORIGINS',
    default='http://localhost:3000,http://127.0.0.1:3000,http://localhost:8080,http://127.0.0.1:8080',
    cast=Csv()
)

# En producción, si se define FRONTEND_URL, usarlo también para CSRF_TRUSTED_ORIGINS
if not DEBUG:
    _frontend_urls = config('FRONTEND_URL', default=None)
    if _frontend_urls:
        CSRF_TRUSTED_ORIGINS = Csv()(_frontend_urls)

# Configuración de ALLOWED_HOSTS
if not DEBUG:
    # Permitir override desde variables de entorno en producción
    _env_allowed_hosts = config('ALLOWED_HOSTS', default=None)
    if _env_allowed_hosts:
        ALLOWED_HOSTS = Csv()(str(_env_allowed_hosts))
    else:
        ALLOWED_HOSTS = [
            '*',  # Permitir todos los hosts (puedes restringirlo en variables de entorno)
        ]
else:
    ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=Csv())

# Configuración de Jazzmin ya importada al inicio del archivo

# Configuración de formatos de imagen soportados
SUPPORTED_IMAGE_FORMATS = [
    'jpg', 'jpeg', 'png', 'gif', 'webp', 'avif', 'svg'
]

# Configuración de ProseEditor
PROSE_EDITOR_CONFIG = {
    'extensions': {
        'Bold': True,
        'Italic': True,
        'Underline': True,
        'Strike': True,
        'Heading': True,
        'BulletList': True,
        'OrderedList': True,
        'Link': True,
        'Blockquote': True,
        'Code': True,
        'CodeBlock': True,
    },
    'sanitize': True,  # Server side sanitization is strongly recommended
}
