#!/bin/bash

echo "üöÄ Construyendo y ejecutando ASOMAP con Docker Compose..."

# Verificar si Docker est√° ejecut√°ndose
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker no est√° ejecut√°ndose. Por favor, inicia Docker primero."
    exit 1
fi

# Verificar si Docker Compose est√° disponible
if ! docker compose version &> /dev/null; then
    echo "‚ùå Docker Compose no est√° disponible. Por favor, verifica la instalaci√≥n."
    exit 1
fi

# Verificar si existe el archivo .env
if [ ! -f .env ]; then
    echo "‚ö†Ô∏è  Archivo .env no encontrado. Copiando desde env.example..."
    cp env.example .env
    echo "‚úÖ Archivo .env creado. Revisa y modifica las variables seg√∫n necesites."
fi

# Verificar que las variables de entorno est√©n configuradas
echo "üîç Verificando configuraci√≥n del servidor..."
if [ -f .env ]; then
    source .env
    if [ -z "$SERVER_IP" ]; then
        echo "‚ùå SERVER_IP no est√° configurada en .env"
        echo "üí° Configura SERVER_IP=192.168.54.10 en tu archivo .env"
        exit 1
    fi
    echo "‚úÖ Servidor configurado para IP: $SERVER_IP"
else
    echo "‚ùå No se pudo cargar el archivo .env"
    exit 1
fi

# Construir el frontend usando el script existente
echo "üì¶ Construyendo frontend..."
if [ -f "build-frontend.sh" ]; then
    ./build-frontend.sh
else
    echo "‚ö†Ô∏è  build-frontend.sh no encontrado, construyendo manualmente..."
    cd asomap-ui-main
    yarn install
    yarn build
    cd ..
fi

# Construir las im√°genes Docker
echo "üê≥ Construyendo im√°genes Docker..."
docker compose build

if [ $? -ne 0 ]; then
    echo "‚ùå Error al construir las im√°genes. Revisa los logs."
    exit 1
fi

# Ejecutar los servicios en modo producci√≥n
echo "üöÄ Iniciando servicios en modo producci√≥n..."
docker compose --profile prod up -d

if [ $? -ne 0 ]; then
    echo "‚ùå Error al iniciar los servicios. Revisa los logs."
    exit 1
fi

echo "‚úÖ Servicios iniciados exitosamente!"
echo ""
echo "üåê URLs disponibles:"
echo "   ‚Ä¢ Aplicaci√≥n principal: http://$SERVER_IP:8080"
echo "   ‚Ä¢ Backend API: http://$SERVER_IP:8000"
echo "   ‚Ä¢ Admin de Django: http://$SERVER_IP:8080/admin"
echo "   ‚Ä¢ API Swagger: http://$SERVER_IP:8000/api/schema/swagger-ui/"
echo "   ‚Ä¢ Health Check: http://$SERVER_IP:8000/health/"
echo ""
echo "üìã Comandos √∫tiles:"
echo "   ‚Ä¢ Ver logs: docker compose logs -f"
echo "   ‚Ä¢ Detener servicios: docker compose down"
echo "   ‚Ä¢ Reiniciar: docker compose restart"
echo "   ‚Ä¢ Ver estado: docker compose ps"
echo ""

# Esperar un momento para que los servicios se inicien
echo "‚è≥ Esperando que los servicios se inicien..."
sleep 15

# Verificar el estado de los servicios
echo "üîç Verificando estado de los servicios..."
docker compose ps

echo ""
echo "üéâ ¬°ASOMAP est√° listo en modo producci√≥n!"
echo ""
echo "üîß Configuraci√≥n aplicada:"
echo "   ‚Ä¢ IP del servidor: $SERVER_IP"
echo "   ‚Ä¢ ALLOWED_HOSTS: Configurado para $SERVER_IP"
echo "   ‚Ä¢ CSRF_TRUSTED_ORIGINS: Configurado para $SERVER_IP"
echo "   ‚Ä¢ CORS_ALLOWED_ORIGINS: Configurado para $SERVER_IP"
echo "   ‚Ä¢ CORS_ORIGIN_ALLOW_ALL: $(if [ "$DEBUG" = "False" ]; then echo "False (Producci√≥n)"; else echo "True (Desarrollo)"; fi)"
echo "   ‚Ä¢ CORS_ALLOW_CREDENTIALS: $(if [ "$DEBUG" = "False" ]; then echo "True (Producci√≥n)"; else echo "False (Desarrollo)"; fi)"
echo ""
echo "üí° Para modo desarrollo: ./dev-mode.sh"
echo "üí° Para ver logs: docker compose logs -f"
